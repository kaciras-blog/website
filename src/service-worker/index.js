import { cacheNames, CacheProxyServer, ManagedCache } from "./cache";

const STATIC_CACHE_NAME = "StaticFiles-V1";

const proxyServer = new CacheProxyServer();
const staticCache = new ManagedCache(STATIC_CACHE_NAME); // add STATIC_CACHE_NAME to cacheNames
proxyServer.addRoute(new RegExp("^/static/"), staticCache.cacheFirst());


self.addEventListener("install", event => {
	// This field will be generated by ServiceWorkerWebpackPlugin.
	// noinspection JSUnresolvedVariable
	const { assets } = global.serviceWorkerOption;

	event.waitUntil(caches.open(STATIC_CACHE_NAME)
		.then(cache => cache.addAll(assets))
		.then(() => console.log("Precache successfully."))
		.catch(err => console.error("Precache failure.", err))
	);
	return self.skipWaiting();
});

self.addEventListener("activate", event => {
	console.log("[ServiceWorker]: Activate");

	// 删除当前版本用不到的缓存
	event.waitUntil(caches.keys().then(keys =>
		Promise.all(keys.filter(k => !cacheNames.has(k)).map(k => caches.delete(k)))));

	return self.clients.claim();
});

self.addEventListener("fetch", proxyServer.fetchHandler());
