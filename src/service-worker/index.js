import { cacheNames, CacheProxyServer, ManagedCache, RegexRoute } from "./cache";

const STATIC_CACHE_NAME = "StaticFiles";
const proxyServer = new CacheProxyServer();

const staticCache = new ManagedCache(STATIC_CACHE_NAME); // add STATIC_CACHE_NAME to cacheNames
proxyServer.addRoute(new RegexRoute("/static/", staticCache.cacheFirst()));

const ApiCache = new ManagedCache("API", 256, 7 * 24 * 60 * 60);
// proxyServer.addRoute(new RegexRoute("//api.kaciras.net/", ApiCache.networkFirst()));


self.addEventListener("install", event => {
	// This field will be generated by ServiceWorkerWebpackPlugin.
	// noinspection JSUnresolvedVariable
	const { assets } = global.serviceWorkerOption;

	event.waitUntil(caches.open(STATIC_CACHE_NAME)
		.then(cache => cache.addAll(assets))
		.then(() => console.log("Precache successfully."))
		.catch(err => console.error("Precache failure.", err))
	);
	return self.skipWaiting();
});

self.addEventListener("activate", event => {
	console.log("[ServiceWorker]: Activate!!!");

	// 删除当前版本用不到的缓存，并启用导航预载
	event.waitUntil(async () => {
		const keys = await caches.keys().filter(k => !cacheNames.has(k));
		await Promise.all(keys.map(k => caches.delete(k)));

		if (self.registration.navigationPreload) {
			await self.registration.navigationPreload.enable();
		}
	});

	return self.clients.claim();
});

self.addEventListener("fetch", proxyServer.fetchHandler());
